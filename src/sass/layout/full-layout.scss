@use "../abstracts/variables" as *;

// App container
.app-container {
  background: $lighter;
  display: grid;
  min-height: 100vh;
}

// App
.app-frame {
  background: $lightest;
  box-shadow: $box-shadow;
  height: $app-height;
  margin: auto;
  overflow: auto;
  width: $app-width;
  position: relative;
}

// Page
.page {
  padding: $app-padding;
}

// Story
.story {
  clear: both;

  + .story {
    margin-top: 40px;
  }
}

// Thumbnail
.thumb {
  float: right;
  height: 65px;
  margin-bottom: 10px;
  margin-left: 10px;
  width: 65px;
}

// Date line
.dateline {
  color: $medium;
  font-style: italic;
  margin: 0 0 0.25em;
}

// Excerpt
.excerpt {
  margin: 0 0 0.5em;
}

// Headline
.headline {
  font-size: 1.1em;
  font-weight: 700;
}

// Reaction buttons
.react-btn {
  font-size: 18px;
  text-shadow: none;

  .plus {
    transition: transform 0.3s ease;
  }

  &[aria-expanded="true"] {
    .plus {
      transform: rotate(45deg);
    }
  }
}

.reactions {
  display: inline-block;

  .react-btn {
    animation: slide-in 0.3s ease;
    animation-fill-mode: backwards; //This adds the value of the 0%{} keyframe to the element before the animation starts which is (opacity: 0) and (transform: translateX(-20px)) in this scenario

    //NOTE - using a loop in sass to add transition delay to each of the react-btn element
    @for $i from 1 through 3 {
      &:nth-child(#{$i}) {
        animation-delay: ($i - 1) *
          0.1s; //Subtracting 1 from each iteration because we don't want any delay for the first react-btn hence it becomes zero-based i.e for 1st element (1 - 1) * .1s = 0 , 2nd element (2 - 1) * .1s = .1s and so on.
      }
    }
  }

  &:not(.active) {
    display: none;
  }
}

//Slide-in animation
@keyframes slide-in {
  0% {
    opacity: 0;
    transform: translateX(-20px);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

//plus icon

.plus {
  display: inline-block;
  height: 18px;
  width: 18px;
  position: relative;

  .h {
    background: $dark;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    height: 2px;
    width: 100%;
  }

  .v {
    background: $dark;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 2px;
    height: 100%;
  }
}

//screen reader only
.sr-only {
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important; // Fix for https://github.com/twbs/bootstrap/issues/25686
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;

  // Fix for positioned table caption that could become anonymous cells
  &:not(caption) {
    position: absolute !important;
  }
}

//Dismissible disclaimer
.dismiss {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: transparentize($lighter, 0.05);
  padding: 25px;
  box-shadow: 0 -4px 8px transparentize($darker, 0.8);

  p {
    margin: 0;
  }

  &:not(.active) {
    display: none;
  }
}

//close button
.close {
  background: transparent;
  color: $medium;
  box-shadow: none;
  font-size: 24px;
  text-shadow: none;
  position: absolute;
  top: 0;
  right: 0;

  &:hover,
  &:focus {
    background: none;
    color: $primary;
  }
}
